git init
gitk

git config 
git config --list
git config --lidt --show-origin
git config --global user.name "<name>"
git config --global user.email "<email>"

git status 

git add <file> 
git add .
git commit -m "<menssage>"
git commit -am "<menssage>"

git log 
git log <file>
git log --stat
git log --all
git log --all --graph --decorate --oneline
git show <file>
git diff <id_commit1> <id_commit2>

git rm <file>
git rm --cached <file>
git reset <id commit> --hard
git reset <id_commit> --soft
git reset HEAD

git branch
git branch <name>
git branch -m <new_name>
git checkout <branch>
git branch -D <branch>
git merge <branch>
git show-branch
git show-branch --all


git checkout <id_commit> <file>
git checkout <branch> <file>

git tag -a v0.1 -m <"mensaje"> <id_commit>
git tag
git show-ref --tags
git tag -d <name_tag>

git stash
git stash save "mensaje identificador del elemento del stashed"
git stash pop
git stash pop stash@{<num_stash>}
git stash apply stash@{<num_stash>}
git stash list
git stash branch <nombre_de_la_rama>
git stash branch nombre_de_rama stash@{<num_stash>}
git stash drop
git stash drop stash@{<num_stash>}
git stash clear

git clean
git clean --dry-run
git clean -f

git cherry-pick <id_commit_branch>

git reflog
git checkout eff544f
git reset --hard eff544f # Perderá todo lo que se encuentra en staging y en el Working directory y se moverá el head al commit eff544f
git reset --soft eff544f # Te recuperará todos los cambios que tengas diferentes al commit eff544f, los agregará al staging area y moverá el head al commit eff544f
git checkout master
git merge eff544f # Fusionará en un nuevo commit la historia de master con el momento específico en el que vive

git add -A # Para hacer uso de amend los archivos deben de estar en staging
git commit --amend # Remendar último commit

git grep color -->use la palabra color
git grep la --> donde use la palabra la
git grep -n color–> en que lineas use la palabra color
git grep -n platzi --> en que lineas use la palabra platzi
git grep -c la --> cuantas veces use la palabra la
git grep -c paltzi --> cuantas veces use la palabra platzi
git grep -c “<p>”–> cuantas veces use la etiqueta <p>

git log-S “cabecera” --> cuantas veces use la palabra cabecera en
todos los commits.

grep–> para los archivos
log --> para los commits.
GITHUB

git remote add origin <URL>
git remote
git remote -v

git clone <url>

git push <url>
git push origin <branch>
git push origin --tags
git push origin :refs/tags/<name_tag>

git fetch + git merge

git pull
git pull origin master --allow-unrelated-histories

ssh-keygen -t rsa -b 4096 -C "kamana108@hotmail.com"
eval $(ssh-agent -s) 
ssh-add ~/.ssh/id_rsa # desde la carpeta donde esta el archivo
git remote set-url origin <git@github.com:..>

rearme https://pandao.github.io/editor.md/en.html












 

 
